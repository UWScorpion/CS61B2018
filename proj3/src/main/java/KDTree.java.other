
import java.util.List;

public class KDTree {
    private static final boolean HORIZONTAL = false;
    private Node root;

    public KDTree(List<Point> points) {

        for (Point point : points) {
            root = insert(point, root, HORIZONTAL);
        }
    }

    // Insert points into the KDTree.
    private Node insert(Point point, Node node, boolean splitDim) {
        if (node == null) {
            return new Node(point, splitDim);
        }

        // If point has the same coordinate as the node point,
        // just return the node;
        if (point.equals(node.getPoint())) {
            return node;
        }

        int cmp = comparePoints(point, node.getPoint(), splitDim);
        if (cmp < 0) {
            node.left = insert(point, node.getLeft(), !splitDim);
        } else {
            node.right = insert(point, node.getRight(), !splitDim);
        }

        return node;
    }


    // Find the nearest point to the target point.
    public Point nearest(double x, double y) {
        Point target = new Point(x, y);
        return nearest(root, target, root.getPoint());
    }

    private Point nearest(Node node, Point target, Point best) {
        if (node == null) {
            return best;
        }

        // Compare the current best point with the current node's point.
        double bestDist = Point.distance(best, target);
        double currDist = Point.distance(node.getPoint(), target);
        if (Double.compare(currDist, bestDist) < 0) {
            best = node.getPoint();
        }

        Node goodSideNode;
        Node badSideNode;
        int cmp = comparePoints(target, node.getPoint(), node.getSplitDim());
        if (cmp < 0) {
            goodSideNode = node.getLeft();
            badSideNode = node.getRight();
        } else {
            goodSideNode = node.getRight();
            badSideNode = node.getLeft();
        }

        // DFS in goodSide first, then check the badSide, done recursively.
        best = nearest(goodSideNode, target, best);
        if (isWorthLooking(node, target, best)) {
            best = nearest(badSideNode, target, best);
        }

        return best;
    }

    // Check whether the badSide intersects with the circle that,
    // centred at target point with radius of square distance between
    // target point and best point. If intersects, then the badSide is
    // worth looking.
    private boolean isWorthLooking(Node node, Point target, Point best) {
        double distToBest = Point.distance(best, target);
        double distToBad;
        if (node.splitDim == HORIZONTAL) {
            distToBad = Point.distance(new Point(node.point.getX(), target.getY()), target);
        } else {
            distToBad = Point.distance(new Point(target.getX(), node.point.getY()), target);
        }
        return Double.compare(distToBad, distToBest) < 0;
    }

    // Compare two points based on the split dimension of the current node.
    private int comparePoints(Point a, Point b, boolean splitDim) {
        if (splitDim == HORIZONTAL) {
            return Double.compare(a.getX(), b.getX());
        } else {
            return Double.compare(a.getY(), b.getY());
        }
    }

    static class Node {
        private Point point;
        private boolean splitDim;
        private Node left;
        private Node right;

        Node(Point point, boolean splitDim) {
            this.point = point;
            this.splitDim = splitDim;
            left = null;
            right = null;
        }

        public Point getPoint() {
            return point;
        }

        public Node getLeft() {
            return left;
        }

        public Node getRight() {
            return right;
        }

        public boolean getSplitDim() {
            return splitDim;
        }

        static class Point {
            private double x;
            private double y;

            public Point(double x, double y) {
                this.x = x;
                this.y = y;
            }

            public double getX() {
                return x;
            }

            public double getY() {
                return y;
            }

            /**
             * Returns the euclidean distance (L2 norm) squared between two points
             * (x1, y1) and (x2, y2). Note: This is the square of the Euclidean distance,
             * i.e. there's no square root.
             */
            private static double distance(double x1, double x2, double y1, double y2) {
                return Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2);
            }

            /**
             * Returns the euclidean distance (L2 norm) squared between two points.
             * Note: This is the square of the Euclidean distance, i.e.
             * there's no square root.
             */
            public static double distance(Point p1, Point p2) {
                return distance(p1.getX(), p2.getX(), p1.getY(), p2.getY());
            }

            @Override
            public boolean equals(Object other) {
                if (other == null) {
                    return false;
                }
                if (other.getClass() != this.getClass()) {
                    return false;
                }
                Point otherPoint = (Point) other;
                return getX() == otherPoint.getX() && getY() == otherPoint.getY();
            }

            @Override
            public int hashCode() {
                return Double.hashCode(x) ^ Double.hashCode(y);
            }

            @Override
            public String toString() {
                return String.format("Point x: %.10f, y: %.10f", x, y);
            }
        }
    }
}